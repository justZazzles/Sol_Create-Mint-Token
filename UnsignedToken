// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/token/ERC20/ERC20.sol";

contract UnsignedToken is ERC20 {
    address public owner; 
    constructor() ERC20("Zazzles", "zz") {
      owner = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
      _mint(msg.sender, 100 * (10 ** uint(decimals())));
    }

    modifier onlyOwner()
    {
        require(msg.sender == owner, "Ownership Error: Does not match.");
        _;
    }

    function mint(address account, uint256 amount) public onlyOwner {
      _mint(account, amount);
    }

    function burn(address account, uint256 amount) public {
      _burn(account, amount);
    }

    function transfer(address to, uint256 amount) public override returns (bool) {
        require(amount <= balanceOf(msg.sender), "Not enough balance to Transfer!");
        _transfer(msg.sender, to, amount);
        return true;
    }
}
